"use client"

import { useState } from "react"
import { motion } from "framer-motion"
import {
  Calendar,
  MapPin,
  Clock,
  DollarSign,
  Star,
  Camera,
  Download,
  Share2,
  CheckCircle,
  Plane,
  Train,
  Bus,
  Car,
  Utensils,
  Heart,
  Cloud,
  Building,
  ExternalLink,
  Navigation,
  Landmark,
  ShoppingBag,
  Sunset,
  Users,
  Lightbulb,
} from "lucide-react"
import placesapi from "../Services/places-service"

export default function FinalItinerary({ tripData, onPrev }) {
  const [checkedActivities, setCheckedActivities] = useState({})
  const [selectedDay, setSelectedDay] = useState(1)

  const handleActivityCheck = (dayIndex, activityIndex) => {
    const key = `${dayIndex}-${activityIndex}`
    setCheckedActivities((prev) => ({
      ...prev,
      [key]: !prev[key],
    }))
  }

  // Check if special interest should be ignored
  const shouldIgnoreSpecialInterest = () => {
    if (!tripData.specialInterest) return true

    const interest = tripData.specialInterest.trim().toLowerCase()
    return (
      interest === "" ||
      interest === "no" ||
      interest === "n/a" ||
      interest === "no special interest" ||
      interest === "none"
    )
  }

  const exportItinerary = () => {
    const itineraryText = `
🌟 SMART JOURNEY - AI TRIP PLANNER 🌟

📍 Destination: ${tripData.destination || "Not specified"}
🏠 Starting From: ${tripData.startLocation || "Not specified"}
📅 Duration: ${tripData.days || 0} days
💰 Budget: ₹${tripData.budget?.toLocaleString() || 0}
👥 Travelers: ${tripData.travelers || 1}
🚗 Transport: ${tripData.selectedTransport?.name || "Not selected"}
${!shouldIgnoreSpecialInterest() ? `💡 Special Interest: ${tripData.specialInterest}` : ""}

${
  tripData.tripPlan?.days
    ?.map(
      (day) => `
📅 ${day.title || `Day ${day.day}`}
${
  day.activities
    ?.map((activity) => `  • ${activity.time} - ${activity.activity} at ${activity.location} (₹${activity.cost})`)
    .join("\n") || "No activities planned"
}
💰 Daily Budget: ₹${day.totalCost || 0}
`,
    )
    .join("\n") || "No days planned"
}

🏨 Recommended Hotels:
${
  tripData.tripPlan?.dayWiseAccommodations
    ? Object.values(tripData.tripPlan.dayWiseAccommodations)
        .flat()
        .map((hotel) => `  • ${hotel.name} - ₹${hotel.estimatedPrice}/night (${hotel.rating}⭐)`)
        .join("\n")
    : "No hotels recommended"
}

Generated by Smart Journey AI Trip Planner
    `

    const blob = new Blob([itineraryText], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${tripData.destination || "trip"}-itinerary.txt`
    a.click()
  }

  const shareItinerary = () => {
    if (navigator.share) {
      navigator.share({
        title: `My ${tripData.destination || "Trip"} Plan`,
        text: `Check out my AI-generated trip plan for ${tripData.destination || "my destination"}!`,
        url: window.location.href,
      })
    }
  }

  const getTransportIcon = (type) => {
    switch (type) {
      case "flight":
        return <Plane className="w-5 h-5" />
      case "train":
        return <Train className="w-5 h-5" />
      case "bus":
        return <Bus className="w-5 h-5" />
      case "car":
        return <Car className="w-5 h-5" />
      default:
        return <Navigation className="w-5 h-5" />
    }
  }

  const getActivityIcon = (type) => {
    const icons = {
      sightseeing: <Camera className="w-4 h-4" />,
      food: <Utensils className="w-4 h-4" />,
      cultural: <Landmark className="w-4 h-4" />,
      shopping: <ShoppingBag className="w-4 h-4" />,
      adventure: <Navigation className="w-4 h-4" />,
      relaxation: <Sunset className="w-4 h-4" />,
    }
    return icons[type] || <Clock className="w-4 h-4" />
  }

  const getActivityColor = (type) => {
    const colors = {
      sightseeing: "bg-blue-100 text-blue-700 border-blue-200",
      food: "bg-orange-100 text-orange-700 border-orange-200",
      cultural: "bg-pink-100 text-pink-700 border-pink-200",
      shopping: "bg-yellow-100 text-yellow-700 border-yellow-200",
      adventure: "bg-red-100 text-red-700 border-red-200",
      relaxation: "bg-indigo-100 text-indigo-700 border-indigo-200",
    }
    return colors[type] || "bg-gray-100 text-gray-700 border-gray-200"
  }

  const handleHotelClick = async (hotel) => {
    try {
      const searchQuery = `${hotel.name} ${tripData.destination}`
      const placeResult = await placesapi.searchPlace(searchQuery)

      if (placeResult && placeResult.location) {
        placesapi.openInGoMaps(searchQuery, placeResult.location.lat, placeResult.location.lng)
      } else {
        const query = encodeURIComponent(`${hotel.name} ${tripData.destination}`)
        const goMapsUrl = `https://go.maps.pro/search/${query}`
        window.open(goMapsUrl, "_blank", "noopener,noreferrer")
      }
    } catch (error) {
      console.error("Error finding hotel location:", error)
      const query = encodeURIComponent(`${hotel.name} ${tripData.destination}`)
      const goMapsUrl = `https://go.maps.pro/search/${query}`
      window.open(goMapsUrl, "_blank", "noopener,noreferrer")
    }
  }

  // Safety check for tripPlan data
  const hasTripPlan = tripData && tripData.tripPlan && tripData.tripPlan.days && tripData.tripPlan.days.length > 0
  const hasSelectedDay = hasTripPlan && tripData.tripPlan.days.find((day) => day.day === selectedDay)

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        {/* Header */}
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center">
          <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-4">
            🎉 Your Complete Travel Plan
          </h1>
          <p className="text-gray-600 text-xl mb-6">
            Everything you need for an amazing trip to {tripData.destination || "your destination"}
          </p>

          <div className="flex justify-center space-x-4">
            <button
              onClick={exportItinerary}
              className="flex items-center space-x-2 bg-white border border-gray-300 rounded-xl px-6 py-3 text-gray-700 hover:bg-gray-50 transition-all shadow-lg"
            >
              <Download className="w-5 h-5" />
              <span>Export Itinerary</span>
            </button>
            <button
              onClick={shareItinerary}
              className="flex items-center space-x-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl px-6 py-3 hover:shadow-xl transition-all"
            >
              <Share2 className="w-5 h-5" />
              <span>Share Trip</span>
            </button>
          </div>
        </motion.div>

        {/* Trip Overview Cards */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="grid md:grid-cols-2 lg:grid-cols-4 gap-6"
        >
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/50">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                <MapPin className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-bold text-gray-800">Destination</h3>
                <p className="text-gray-600">{tripData.destination || "Not specified"}</p>
              </div>
            </div>
            <div className="text-sm text-gray-500">From: {tripData.startLocation || "Not specified"}</div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/50">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center">
                <Calendar className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-bold text-gray-800">Duration</h3>
                <p className="text-gray-600">{tripData.days || 0} Days</p>
              </div>
            </div>
            <div className="text-sm text-gray-500">Start: {tripData.travelDates?.startDate || "Not set"}</div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/50">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center">
                <DollarSign className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-bold text-gray-800">Budget</h3>
                <p className="text-gray-600">₹{tripData.budget?.toLocaleString() || 0}</p>
              </div>
            </div>
            <div className="text-sm text-gray-500">Per person budget</div>
          </div>

          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-white/50">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center">
                <Users className="w-6 h-6 text-white" />
              </div>
              <div>
                <h3 className="font-bold text-gray-800">Travelers</h3>
                <p className="text-gray-600">
                  {tripData.travelers || 1} Person{(tripData.travelers || 1) > 1 ? "s" : ""}
                </p>
              </div>
            </div>
            <div className="text-sm text-gray-500">Group size</div>
          </div>
        </motion.div>

        {/* Preferences & Weather */}
        <div className="grid lg:grid-cols-3 gap-6">
          {/* Special Interest - NEW SECTION */}
          {!shouldIgnoreSpecialInterest() && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.15 }}
              className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50 lg:col-span-3"
            >
              <div className="bg-gradient-to-r from-amber-50 via-yellow-50 to-orange-50 rounded-t-2xl px-6 py-4 flex items-center space-x-3 border-b border-amber-200">
                <div className="w-8 h-8 bg-gradient-to-br from-amber-500 to-orange-500 rounded-full flex items-center justify-center">
                  <Lightbulb className="w-5 h-5 text-white" />
                </div>
                <h3 className="font-bold text-gray-800 text-lg">Your Special Interest</h3>
                <div className="ml-auto bg-amber-100 text-amber-800 px-3 py-1 rounded-full text-sm font-medium">
                  Trip Focus
                </div>
              </div>
              <div className="p-6">
                <div className="bg-gradient-to-r from-amber-100 to-yellow-100 rounded-xl p-6 border border-amber-200">
                  <div className="flex items-start space-x-4">
                    <div className="w-12 h-12 bg-gradient-to-br from-amber-400 to-orange-400 rounded-full flex items-center justify-center flex-shrink-0">
                      <Lightbulb className="w-6 h-6 text-white" />
                    </div>
                    <div className="flex-1">
                      <h4 className="text-xl font-bold text-amber-900 mb-2">"{tripData.specialInterest}"</h4>
                      <p className="text-amber-800 leading-relaxed">
                        Your entire trip has been specially crafted around this interest. Each day includes activities
                        and experiences that align with your passion, ensuring a truly personalized and meaningful
                        journey.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}

          {/* Food Preferences */}
          {tripData.foodPreferences && tripData.foodPreferences.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50"
            >
              <div className="bg-gradient-to-r from-orange-50 to-red-50 rounded-t-2xl px-6 py-4 flex items-center space-x-3">
                <Utensils className="w-6 h-6 text-orange-600" />
                <h3 className="font-bold text-gray-800 text-lg">Food Preferences</h3>
              </div>
              <div className="p-6">
                <div className="flex flex-wrap gap-2">
                  {tripData.foodPreferences.map((food, index) => (
                    <span
                      key={index}
                      className="bg-orange-100 text-orange-700 px-3 py-1 rounded-full text-sm font-medium border border-orange-200"
                    >
                      {food}
                    </span>
                  ))}
                </div>
              </div>
            </motion.div>
          )}

          {/* Interests */}
          {tripData.interests && tripData.interests.length > 0 && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50"
            >
              <div className="bg-gradient-to-r from-green-50 to-teal-50 rounded-t-2xl px-6 py-4 flex items-center space-x-3">
                <Heart className="w-6 h-6 text-green-600" />
                <h3 className="font-bold text-gray-800 text-lg">Interests</h3>
              </div>
              <div className="p-6">
                <div className="flex flex-wrap gap-2">
                  {tripData.interests.map((interest, index) => (
                    <span
                      key={index}
                      className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm font-medium border border-green-200"
                    >
                      {interest}
                    </span>
                  ))}
                </div>
              </div>
            </motion.div>
          )}

          {/* Weather */}
          {tripData.weatherData && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-gradient-to-br from-blue-500 to-purple-600 text-white rounded-2xl shadow-xl"
            >
              <div className="px-6 py-4 flex items-center space-x-3">
                <Cloud className="w-6 h-6" />
                <h3 className="font-bold text-lg">Current Weather</h3>
              </div>
              <div className="px-6 pb-6">
                <div className="text-center mb-4">
                  <div className="text-3xl font-bold mb-2">{Math.round(tripData.weatherData.main?.temp || 0)}°C</div>
                  <div className="text-blue-100 capitalize">
                    {tripData.weatherData.weather?.[0]?.description || "Unknown"}
                  </div>
                </div>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-blue-200">Feels like</div>
                    <div className="font-semibold">{Math.round(tripData.weatherData.main?.feels_like || 0)}°C</div>
                  </div>
                  <div className="text-center">
                    <div className="text-blue-200">Humidity</div>
                    <div className="font-semibold">{tripData.weatherData.main?.humidity || 0}%</div>
                  </div>
                </div>
              </div>
            </motion.div>
          )}
        </div>

        {/* Selected Transport */}
        {tripData.selectedTransport && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50"
          >
            <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-t-2xl px-6 py-4 flex items-center space-x-3">
              {getTransportIcon(tripData.selectedTransport.type)}
              <h3 className="font-bold text-gray-800 text-lg">Selected Transport</h3>
            </div>
            <div className="p-6">
              <div className="grid md:grid-cols-4 gap-6">
                <div className="md:col-span-2">
                  <h4 className="font-bold text-xl text-gray-800 mb-2">{tripData.selectedTransport.name}</h4>
                  <p className="text-gray-600 mb-3">
                    {tripData.selectedTransport.company ||
                      tripData.selectedTransport.operator ||
                      tripData.selectedTransport.airline ||
                      "Transport Provider"}
                  </p>
                  <div className="flex items-center space-x-4 text-sm text-gray-600">
                    <div className="flex items-center space-x-1">
                      <Clock className="w-4 h-4" />
                      <span>{tripData.selectedTransport.duration || "Duration not specified"}</span>
                    </div>
                    <span>
                      {tripData.selectedTransport.departure || "Departure"} -{" "}
                      {tripData.selectedTransport.arrival || "Arrival"}
                    </span>
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-600">
                    {tripData.selectedTransport.type === "train" &&
                    Array.isArray(tripData.selectedTransport.classes) &&
                    tripData.selectedTransport.classes.length > 0
                      ? `from ₹${Math.min(...tripData.selectedTransport.classes.map((c) => c.price))}`
                      : `₹${tripData.selectedTransport.price || 0}`}
                  </div>
                  <div className="text-sm text-gray-500">Cost</div>
                </div>
                <div className="text-center">
                  <div className="text-lg font-bold text-blue-600 capitalize">
                    {tripData.selectedTransport.type || "Transport"}
                  </div>
                  <div className="text-sm text-gray-500">Transport Mode</div>
                </div>
              </div>
              {tripData.selectedTransport.features && tripData.selectedTransport.features.length > 0 && (
                <div className="mt-4 flex flex-wrap gap-2">
                  {tripData.selectedTransport.features.slice(0, 4).map((feature, index) => (
                    <span
                      key={index}
                      className="bg-indigo-100 text-indigo-700 px-3 py-1 rounded-full text-sm font-medium border border-indigo-200"
                    >
                      {feature}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </motion.div>
        )}

        {/* Day-wise Itinerary */}
        {hasTripPlan && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="space-y-6"
          >
            <div className="flex items-center justify-between">
              <h2 className="text-3xl font-bold text-gray-800">📅 Day-wise Itinerary</h2>
              <div className="bg-gradient-to-r from-green-100 to-emerald-100 px-4 py-2 rounded-full border border-green-200">
                <span className="text-green-700 font-semibold">
                  Total: ₹{tripData.tripPlan.totalEstimatedCost?.toLocaleString() || "Calculating..."}
                </span>
              </div>
            </div>

            {/* Day Selector */}
            <div className="flex space-x-3 overflow-x-auto pb-3">
              {tripData.tripPlan.days.map((day) => (
                <button
                  key={day.day}
                  onClick={() => setSelectedDay(day.day)}
                  className={`flex-shrink-0 px-6 py-3 rounded-full font-semibold transition-all transform hover:scale-105 ${
                    selectedDay === day.day
                      ? "bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white shadow-xl"
                      : "bg-white text-gray-600 hover:bg-gray-50 shadow-md border"
                  }`}
                >
                  Day {day.day}
                </button>
              ))}
            </div>

            {/* Selected Day Content */}
            {hasSelectedDay &&
              tripData.tripPlan.days.map(
                (day) =>
                  selectedDay === day.day && (
                    <motion.div
                      key={day.day}
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50 overflow-hidden"
                    >
                      {/* Day Header */}
                      <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 text-white p-6">
                        <div className="flex justify-between items-start">
                          <div>
                            <h3 className="text-2xl font-bold mb-2">{day.title || `Day ${day.day}`}</h3>
                            <p className="text-blue-100 mb-3 text-lg">{day.theme || "Explore and enjoy"}</p>
                            {day.highlights && day.highlights.length > 0 && (
                              <div className="flex flex-wrap gap-2">
                                {day.highlights.slice(0, 3).map((highlight, idx) => (
                                  <span
                                    key={idx}
                                    className="bg-white/20 backdrop-blur-sm px-3 py-1 rounded-full text-sm font-medium"
                                  >
                                    {highlight}
                                  </span>
                                ))}
                              </div>
                            )}
                          </div>
                          <div className="text-right">
                            <div className="text-2xl font-bold">₹{day.totalCost?.toLocaleString() || "0"}</div>
                            <div className="text-blue-100">Daily Budget</div>
                          </div>
                        </div>
                      </div>

                      {/* Activities Timeline - Updated with Lavender Background */}
                      <div className="p-6 space-y-4">
                        {day.activities && day.activities.length > 0 ? (
                          day.activities.map((activity, activityIndex) => {
                            const key = `${day.day}-${activityIndex}`
                            const isChecked = checkedActivities[key]
                            const matchesSpecialInterest =
                              activity.matchesSpecialInterest && !shouldIgnoreSpecialInterest()

                            return (
                              <label
                                key={activityIndex}
                                htmlFor={key}
                                className={`flex items-start space-x-4 p-4 rounded-xl cursor-pointer transition-all duration-300 border ${
                                  isChecked
                                    ? "bg-green-50 border-green-200 shadow-md"
                                    : matchesSpecialInterest
                                      ? "bg-gradient-to-r from-amber-50 to-yellow-50 border-amber-200 hover:from-amber-100 hover:to-yellow-100 hover:border-amber-300 hover:shadow-lg"
                                      : "bg-gradient-to-r from-lavender-50 to-lavender-100 border-lavender-200 hover:from-lavender-100 hover:to-lavender-200 hover:border-lavender-300 hover:shadow-lg"
                                }`}
                                style={{
                                  backgroundColor: isChecked
                                    ? undefined
                                    : matchesSpecialInterest
                                      ? "rgb(255 251 235)" // Amber-50
                                      : "rgb(248 250 255)", // Very light lavender
                                  borderColor: isChecked
                                    ? undefined
                                    : matchesSpecialInterest
                                      ? "rgb(254 215 170)" // Amber-200
                                      : "rgb(224 231 255)", // Light lavender border
                                }}
                                onMouseEnter={(e) => {
                                  if (!isChecked) {
                                    if (matchesSpecialInterest) {
                                      e.target.style.backgroundColor = "rgb(254 243 199)" // Amber-100
                                      e.target.style.borderColor = "rgb(251 191 36)" // Amber-300
                                    } else {
                                      e.target.style.backgroundColor = "rgb(238 242 255)" // Medium lavender on hover
                                      e.target.style.borderColor = "rgb(199 210 254)" // Medium lavender border on hover
                                    }
                                  }
                                }}
                                onMouseLeave={(e) => {
                                  if (!isChecked) {
                                    if (matchesSpecialInterest) {
                                      e.target.style.backgroundColor = "rgb(255 251 235)" // Back to amber-50
                                      e.target.style.borderColor = "rgb(254 215 170)" // Back to amber-200
                                    } else {
                                      e.target.style.backgroundColor = "rgb(248 250 255)" // Back to light lavender
                                      e.target.style.borderColor = "rgb(224 231 255)" // Back to light lavender border
                                    }
                                  }
                                }}
                              >
                                <input
                                  type="checkbox"
                                  id={key}
                                  checked={isChecked || false}
                                  onChange={() => handleActivityCheck(day.day, activityIndex)}
                                  className="mt-2 h-5 w-5 rounded border-gray-300 text-green-600 focus:ring-green-500 cursor-pointer"
                                />
                                <div className="flex-1">
                                  <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center space-x-3">
                                      <span className="font-bold text-purple-700 text-lg">
                                        {activity.time || "Time not set"}
                                      </span>
                                      {activity.type && (
                                        <span
                                          className={`px-3 py-1 rounded-full text-sm border font-medium flex items-center space-x-1 ${getActivityColor(activity.type)}`}
                                        >
                                          {getActivityIcon(activity.type)}
                                          <span className="capitalize">{activity.type}</span>
                                        </span>
                                      )}
                                      {/* Special Interest Badge */}
                                      {matchesSpecialInterest && (
                                        <span className="px-2 py-1 bg-amber-100 text-amber-800 rounded-full text-xs font-medium flex items-center">
                                          <Lightbulb className="w-3 h-3 mr-1" />
                                          Special Interest
                                        </span>
                                      )}
                                    </div>
                                    <div className="text-right">
                                      <div className="font-bold text-green-600">₹{activity.cost || 0}</div>
                                      <div className="text-sm text-gray-500">
                                        {activity.duration || "Duration not set"}
                                      </div>
                                    </div>
                                  </div>
                                  <h4
                                    className={`font-bold text-lg mb-2 ${
                                      isChecked ? "line-through text-gray-500" : "text-gray-800"
                                    }`}
                                  >
                                    {activity.activity || "Activity not specified"}
                                  </h4>
                                  <div className="flex items-center space-x-2 text-gray-600 mb-2">
                                    <MapPin className="w-4 h-4" />
                                    <span>{activity.location || "Location not specified"}</span>
                                  </div>
                                  {activity.description && <p className="text-gray-600 mb-3">{activity.description}</p>}
                                  {activity.tips && (
                                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                                      <p className="text-yellow-800 text-sm">💡 {activity.tips}</p>
                                    </div>
                                  )}
                                </div>
                                {isChecked && <CheckCircle className="w-6 h-6 text-green-600 mt-2 flex-shrink-0" />}
                              </label>
                            )
                          })
                        ) : (
                          <div className="text-center py-8 text-gray-500">No activities planned for this day</div>
                        )}
                      </div>

                      {/* Day-wise Hotels */}
                      {tripData.tripPlan.dayWiseAccommodations &&
                        tripData.tripPlan.dayWiseAccommodations[day.day] &&
                        tripData.tripPlan.dayWiseAccommodations[day.day].length > 0 && (
                          <div className="border-t bg-gray-50 p-6">
                            <div className="flex items-center space-x-3 mb-6">
                              <Building className="w-6 h-6 text-purple-600" />
                              <h4 className="text-xl font-bold text-gray-800">Hotels for Day {day.day}</h4>
                            </div>
                            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                              {tripData.tripPlan.dayWiseAccommodations[day.day].map((hotel, hotelIdx) => (
                                <div
                                  key={hotel.id || hotelIdx}
                                  className="bg-white rounded-xl shadow-lg border overflow-hidden hover:shadow-xl transition-all duration-300"
                                >
                                  <div className="relative">
                                    <img
                                      src={hotel.thumbnail || "/placeholder.svg?height=200&width=300"}
                                      alt={hotel.name}
                                      className="w-full h-40 object-cover"
                                      onError={(e) => {
                                        e.target.src = "/placeholder.svg?height=200&width=300"
                                      }}
                                    />
                                    <div className="absolute top-2 right-2 bg-white/90 backdrop-blur-sm rounded-full p-1">
                                      <ExternalLink className="w-4 h-4 text-gray-600" />
                                    </div>
                                    <div className="absolute top-2 left-2 bg-purple-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                                      Day {hotel.dayNumber || day.day}
                                    </div>
                                  </div>
                                  <div className="p-4">
                                    <div className="flex justify-between items-start mb-2">
                                      <h5 className="font-bold text-gray-800 text-sm line-clamp-2">
                                        {hotel.name || "Hotel name"}
                                      </h5>
                                      <div className="flex items-center space-x-1">
                                        <Star className="w-3 h-3 text-yellow-400 fill-current" />
                                        <span className="text-xs text-gray-600">{hotel.rating || "N/A"}</span>
                                      </div>
                                    </div>
                                    {hotel.description && (
                                      <p className="text-gray-600 text-xs mb-2 line-clamp-2">{hotel.description}</p>
                                    )}
                                    {hotel.address && (
                                      <div className="flex items-center text-gray-500 mb-2 text-xs">
                                        <MapPin className="w-3 h-3 mr-1" />
                                        <span className="line-clamp-1">{hotel.address}</span>
                                      </div>
                                    )}
                                    {hotel.amenities && hotel.amenities.length > 0 && (
                                      <div className="flex flex-wrap gap-1 mb-3">
                                        {hotel.amenities.slice(0, 2).map((amenity, amenityIdx) => (
                                          <span
                                            key={amenityIdx}
                                            className="bg-blue-50 text-blue-700 px-2 py-1 rounded-full text-xs"
                                          >
                                            {amenity}
                                          </span>
                                        ))}
                                        {hotel.amenities.length > 2 && (
                                          <span className="bg-gray-100 text-gray-600 px-2 py-1 rounded-full text-xs">
                                            +{hotel.amenities.length - 2}
                                          </span>
                                        )}
                                      </div>
                                    )}
                                    <div className="flex justify-between items-center">
                                      <div>
                                        <span className="text-lg font-bold text-green-600">
                                          ₹
                                          {hotel.estimatedPrice?.toLocaleString() || hotel.price?.toLocaleString() || 0}
                                        </span>
                                        <span className="text-gray-500 text-xs">/night</span>
                                      </div>
                                      <button
                                        onClick={() => handleHotelClick(hotel)}
                                        className="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-3 py-1 rounded-lg text-xs font-semibold hover:shadow-lg transition-all"
                                      >
                                        View on Map
                                      </button>
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                    </motion.div>
                  ),
              )}
          </motion.div>
        )}

        {/* Trip Summary */}
        {tripData.tripPlan && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.7 }}
            className="bg-gradient-to-br from-emerald-500 to-teal-600 text-white rounded-2xl shadow-xl p-8"
          >
            <div className="flex items-center space-x-3 mb-6">
              <div className="w-12 h-12 bg-white/20 rounded-full flex items-center justify-center">
                <Star className="w-6 h-6" />
              </div>
              <h3 className="text-2xl font-bold">Trip Summary</h3>
            </div>

            {tripData.tripPlan.summary && (
              <p className="text-emerald-100 leading-relaxed mb-6 text-lg">{tripData.tripPlan.summary}</p>
            )}

            <div className="grid md:grid-cols-3 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold mb-2">₹{tripData.budget?.toLocaleString() || 0}</div>
                <div className="text-emerald-200">Total Budget</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold mb-2">{tripData.days || 0}</div>
                <div className="text-emerald-200">Days of Adventure</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold mb-2">
                  {hasTripPlan
                    ? tripData.tripPlan.days.reduce((total, day) => total + (day.activities?.length || 0), 0)
                    : 0}
                </div>
                <div className="text-emerald-200">Activities Planned</div>
              </div>
            </div>
          </motion.div>
        )}

        {/* Navigation */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.8 }}
          className="flex justify-center pt-8"
        >
          {onPrev && (
            <button
              onClick={onPrev}
              className="px-8 py-4 border-2 border-gray-300 text-gray-700 rounded-xl hover:bg-gray-100 transition-all font-semibold text-lg"
            >
              ← Back to Planning
            </button>
          )}
        </motion.div>
      </div>
    </div>
  )
}
